JSONSchema={validate:function(a,b){function c(a,b,d){function f(a,b,d){function h(b){if(typeof b=="string"&&b!="any"&&typeof a!=b&&!(a instanceof Array&&b=="array"))return[{property:d,message:typeof a+" value found, but a "+b+" is required"}];if(typeof b=="object"){if(b instanceof Array){var e=[];for(var f=0;f<b.length;f++)if(!(e=h(b[f])).length)break;return e}return typeof a!="object"?[{property:d,message:typeof a+" value found, but an object is required"}]:c(a,b,d)}return[]}function f(a){e.push({property:d,message:a})}d+=(d?".":"")+g;if(!b.nullable&&a===null)f("is non-nullable, but has a null value");else if(a===undefined)b.required&&f("is missing and it is required");else{e=e.concat(h(b.type)),b.pattern&&typeof a=="string"&&!a.match(b.pattern)&&f("does not match the regex pattern "+b.pattern),b.length&&typeof a=="string"&&a.length>b.length&&f("may only be "+b.length+" characters long"),typeof b.minimum=="number"&&typeof a=="number"&&b.minimum>a&&f("must have a minimum value of "+b.minimum),typeof b.maximum=="number"&&typeof a=="number"&&b.maximum<a&&f("must have a maximum value of "+b.maximum);if(b.options&&!b.unconstrained){var i=b.options.length,j;for(var k=0;k<i;k++)if(b.options[k]===a){j=1;break}j||f("does not have a value in the options "+b.options.join(", "))}}}var e=[];if(b){typeof a!="object"&&addError("an object is required");for(var g in b)if(b.hasOwnProperty(g)&&g!="*"&&g!="final"&&g!="prototype"){var h=a[g];isNaN(g)||(g="items");var i=b[g];f(h,i,d)}}for(var g in a)a.hasOwnProperty(g)&&b&&!b[g]&&b["final"]===!0&&e.push({property:d,message:typeof h+"The property "+g+" is not defined in the schema and the schema is final"}),h=a[g],b&&!(g in b)&&"*"in b&&f(h,b["*"],d),h&&h.schema&&(e=e.concat(c(h,h.schema,d+"."+g)));return e}var d=(b?c(a,b,""):[]).concat(a.schema?c(a,a.schema,""):[]);return d.length?d:!1}}